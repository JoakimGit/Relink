// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Relink.ApiService.Data;

#nullable disable

namespace Relink.ApiService.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250622211130_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Relink.ApiService.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.LinkAnalytics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Referrer")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ShortenedLinkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ShortenedLinkId", "AccessedAt");

                    b.ToTable("LinkAnalytics");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.LinkMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("LastScrapedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortenedLinkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SiteName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ShortenedLinkId")
                        .IsUnique();

                    b.ToTable("LinkMetadata");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.ShortenedLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FallbackUrl")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LongUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int?>("MaxUsages")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("ShortenedLinks");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ShortenedLinkTag", b =>
                {
                    b.Property<string>("ShortenedLinksId")
                        .HasColumnType("text");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("ShortenedLinksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ShortenedLinkTag");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.LinkAnalytics", b =>
                {
                    b.HasOne("Relink.ApiService.Data.Entities.ShortenedLink", "ShortenedLink")
                        .WithMany("Analytics")
                        .HasForeignKey("ShortenedLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShortenedLink");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.LinkMetadata", b =>
                {
                    b.HasOne("Relink.ApiService.Data.Entities.ShortenedLink", "ShortenedLink")
                        .WithOne("Metadata")
                        .HasForeignKey("Relink.ApiService.Data.Entities.LinkMetadata", "ShortenedLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShortenedLink");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.ShortenedLink", b =>
                {
                    b.HasOne("Relink.ApiService.Data.Entities.Group", "Group")
                        .WithMany("ShortenedLinks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ShortenedLinkTag", b =>
                {
                    b.HasOne("Relink.ApiService.Data.Entities.ShortenedLink", null)
                        .WithMany()
                        .HasForeignKey("ShortenedLinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Relink.ApiService.Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.Group", b =>
                {
                    b.Navigation("ShortenedLinks");
                });

            modelBuilder.Entity("Relink.ApiService.Data.Entities.ShortenedLink", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("Metadata");
                });
#pragma warning restore 612, 618
        }
    }
}
